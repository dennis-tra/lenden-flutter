function isUserData(data) {
  return data.keys().hasOnly(["fcmToken"]) == true
      && (data.fcmToken is string && data.fcmToken.size() > 0 || data.fcmToken == null)
}

service cloud.firestore {
  match /databases/{database}/documents {
    allow read, write: if false; // deny everything by default

    function isAuthenticated(){
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    match /users/{userId} {
      allow get: if isAuthenticated()
                 && isOwner(userId);

      allow create: if isAuthenticated()
              && isOwner(userId)
              && isUserData(incomingData());

      allow update: if isAuthenticated()
              && isOwner(userId)
              && isUserData(incomingData());
    }

    match /pairings/{pairingId} {
      allow list: if isAuthenticated() 
                  && existingData().user_ids[request.auth.uid] == true;
    }
  }
}